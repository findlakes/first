#
# Module:
# Network Detection.
#

module Detection

	MODULE_NAME = "Network Detection"

	DIRS_INFO = [
		{"file"=>"Backup.fuzz.txt", "desc"=>"Detection Backup", "list"=>[]},
		{"file"=>"Tomcat.fuzz.txt", "desc"=>"Detection Tomcat", "list"=>[]},
		{"file"=>"Websphere.fuzz.txt", "desc"=>"Detection Websphere", "list"=>[]},
		{"file"=>"Passwords.fuzz.txt", "desc"=>"Detection Passwords", "list"=>[]},
		{"file"=>"Weblogic.fuzz.txt", "desc"=>"Detection Weblogic", "list"=>[]},
		{"file"=>"Apache.fuzz.txt", "desc"=>"Detection Apache", "list"=>[]},
		{"file"=>"Logins.fuzz.txt", "desc"=>"Detection Logins", "list"=>[]},
		{"file"=>"JBoss.fuzz.txt", "desc"=>"Detection JBoss", "list"=>[]},
		{"file"=>"IIS.fuzz.txt", "desc"=>"Detection IIS", "list"=>[]},
	]
	
	SERVER_INFO = {"desc"=>"Detection Sever","list"=>[]}

	PORT_INFO = {"desc"=>"Detection Port", "list"=>[]}

	def self.run(global)
		# Module Start.
		global.info("Module START #{MODULE_NAME}...")

		# Detect Port
		global.info("#{PORT_INFO["desc"]} Start...")
		thread_port = Thread.new { self.detect_port(global) }

		# Detect Dirs
		thread_list = [] 
		(0...DIRS_INFO.size).each do |n|
			global.info("#{DIRS_INFO[n]["desc"]} Start ...")
			thread_list[n] = Thread.new { self.detect_head2(global, DIRS_INFO[n]) }
		end

		# Wait for threads
		thread_port.join
		thread_list.each { |t| t.join }

		# Debug info.
		global.debug("#{DIRS_INFO}")
		global.debug("#{SERVER_INFO}")
		global.debug("#{PORT_INFO}")
		
		# Module Stop.
	end

	def self.detect_server(global)
		global.info("#{SERVER_INFO["desc"]} Start...")
		list = []
		uri = URI(global.first_uri);
		Net::HTTP.start(uri.host, uri.port) do |http|
			response = http.request_get('/', {"Cookie"=>global.set_cookie, "User-Agent"=>global.user_agent})
			list += [{"code"=>response.code}, {"http_version"=>response.http_version}, {"message"=>response.message} ]
			response.header.each_header {|key,value| list += [{"#{key}"=>"#{value}"}] }
		end
		SERVER_INFO["list"] = list
		global.warn(SERVER_INFO["list"])
	end

	def self.detect_head(global, item)
		File.open('res/'+item['file']) do |file| 
			file.each do |line|
				begin
					Net::HTTP.start(global.host, global.port) do |http|
						response = http.request_head(line.chop, {"Cookie"=>global.set_cookie, "User-Agent"=>global.user_agent})
						item['list'] += [line.chop] if response.code == "200"
					end
				rescue
					next
				end
			end 
		end 
		global.info(item["desc"] + " Stop ...")
		global.warn(item["list"])
	end

	def self.detect_head2(global, item)
		Net::HTTP.start(global.host, global.port) do |http|
			File.open('res/'+item['file']) do |file| 
				file.each do |line|
					begin
						response = http.request_head(line.chop, {"Cookie"=>global.set_cookie, "User-Agent"=>global.user_agent})
						item['list'] += [line.chop] if response.code == "200"
					rescue
						next
					end
				end
			end 
		end 
		global.info(item["desc"] + " Stop ...")
		global.warn(item["list"])
	end

	def self.detect_port(global)
		[21,22,23,25,80,443,3306,3389,1433,1521,8080].each do |port|
			begin
				sock = Socket.new(:INET, :STREAM)
				raw = Socket.sockaddr_in(port, global.ip)
				PORT_INFO["list"] += [port] if sock.connect(raw)
			rescue
				sock.close if sock != nil
	    	end 
		end
		global.warn("Port Found: #{PORT_INFO["list"]}")
	end

end

